import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/employee.dart';
import '../../providers/employee_provider.dart';

class AddEmployeeDialog extends StatefulWidget {
  const AddEmployeeDialog({super.key});

  @override
  State<AddEmployeeDialog> createState() => _AddEmployeeDialogState();
}

class _AddEmployeeDialogState extends State<AddEmployeeDialog> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _phoneController = TextEditingController();
  final _emailController = TextEditingController();
  final _salaryController = TextEditingController();
  String _role = 'Cashier';
  DateTime _hireDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Add Employee'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Full Name'),
              validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<String>(
              value: _role,
              decoration: const InputDecoration(labelText: 'Role'),
              items: ['Cashier', 'Cook', 'Delivery Staff', 'Manager']
                  .map((role) => DropdownMenuItem(
                        value: role,
                        child: Text(role),
                      ))
                  .toList(),
              onChanged: (value) => setState(() => _role = value!),
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _phoneController,
              decoration: const InputDecoration(labelText: 'Phone Number'),
              keyboardType: TextInputType.phone,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(labelText: 'Email'),
              keyboardType: TextInputType.emailAddress,
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _salaryController,
              decoration: const InputDecoration(labelText: 'Salary'),
              keyboardType: TextInputType.number,
              validator: (value) {
                if (value?.isEmpty ?? true) return 'Required';
                if (double.tryParse(value!) == null) return 'Invalid salary';
                return null;
              },
            ),
            const SizedBox(height: 16),
            ListTile(
              title: const Text('Hire Date'),
              subtitle: Text(
                '${_hireDate.year}-${_hireDate.month}-${_hireDate.day}',
              ),
              trailing: IconButton(
                icon: const Icon(Icons.calendar_today),
                onPressed: () async {
                  final date = await showDatePicker(
                    context: context,
                    initialDate: _hireDate,
                    firstDate: DateTime(2000),
                    lastDate: DateTime.now(),
                  );
                  if (date != null) {
                    setState(() => _hireDate = date);
                  }
                },
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _saveEmployee,
          child: const Text('Save'),
        ),
      ],
    );
  }

  // void _saveEmployee() {
  //   if (_formKey.currentState?.validate() ?? false) {
  //     final employee = Employee(
  //       id: 0,
  //       name: _nameController.text,
  //       role: _role,
  //       phone: _phoneController.text,
  //       email: _emailController.text,
  //       hireDate: _hireDate,
  //       salary: double.parse(_salaryController.text),
  //     );

  //     // TODO: Implement employee creation in the provider
  //     Navigator.pop(context);
  //   }
  // }
  void _saveEmployee() async {
    if (_formKey.currentState?.validate() ?? false) {
      final employee = Employee(
        id: 0, // Assuming the ID is auto-generated by the database
        name: _nameController.text,
        role: _role,
        phone: _phoneController.text,
        email: _emailController.text,
        hireDate: _hireDate,
        salary: double.parse(_salaryController.text),
      );

      // Call the EmployeeProvider to save the employee
      await Provider.of<EmployeeProvider>(context, listen: false)
          .addEmployee(employee);
      Navigator.pop(context);
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _phoneController.dispose();
    _emailController.dispose();
    _salaryController.dispose();
    super.dispose();
  }
}
